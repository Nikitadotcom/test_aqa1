{"name": "test_go_to_reviews", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b2f58fac73d3930deceb94b46f5b724f\")>\n\n    def test_go_to_reviews(driver):\n        main_page = MainPage(driver)\n        main_page.open()\n>       main_page.go_to_reviews()\n\ntest_aqa1\\main_test.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_aqa1\\pages\\main_page.py:73: in go_to_reviews\n    self.is_url_contains(\"reviews\")\ntest_aqa1\\pages\\base_page.py:18: in is_url_contains\n    return self.wait.until(EC.url_contains(text))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b2f58fac73d3930deceb94b46f5b724f\")>\nmethod = <function url_contains.<locals>._predicate at 0x000001E127F4AE80>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        ----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:146: TimeoutException"}, "steps": [{"name": "Открываем главную страницу", "status": "passed", "start": 1738745099521, "stop": 1738745100061}], "start": 1738745099517, "stop": 1738745110893, "uuid": "c4cc063d-f4ef-4db0-9630-cceef626769c", "historyId": "ffbdbc1ff16eb3d9874712f4b6d60659", "testCaseId": "ffbdbc1ff16eb3d9874712f4b6d60659", "fullName": "test_aqa1.main_test#test_go_to_reviews", "labels": [{"name": "parentSuite", "value": "test_aqa1"}, {"name": "suite", "value": "main_test"}, {"name": "host", "value": "WIN-HGRM25OJIII"}, {"name": "thread", "value": "1184-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_aqa1.main_test"}]}