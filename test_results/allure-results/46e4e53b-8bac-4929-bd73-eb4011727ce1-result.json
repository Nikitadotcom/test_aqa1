{"name": "test_go_to_blog", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: unable to send message to renderer\n  (Session info: chrome=132.0.6834.160)\nStacktrace:\n\tGetHandleVerifier [0x00007FF7D6B802F5+28725]\n\t(No symbol) [0x00007FF7D6AE2AE0]\n\t(No symbol) [0x00007FF7D697510A]\n\t(No symbol) [0x00007FF7D696222C]\n\t(No symbol) [0x00007FF7D696219C]\n\t(No symbol) [0x00007FF7D69608B6]\n\t(No symbol) [0x00007FF7D696163F]\n\t(No symbol) [0x00007FF7D6979791]\n\t(No symbol) [0x00007FF7D697A27A]\n\t(No symbol) [0x00007FF7D697EABC]\n\t(No symbol) [0x00007FF7D697EB8F]\n\t(No symbol) [0x00007FF7D69C8C85]\n\t(No symbol) [0x00007FF7D69C95FC]\n\t(No symbol) [0x00007FF7D6A13407]\n\t(No symbol) [0x00007FF7D69EFFEF]\n\t(No symbol) [0x00007FF7D6A10181]\n\t(No symbol) [0x00007FF7D69EFD53]\n\t(No symbol) [0x00007FF7D69BA0E3]\n\t(No symbol) [0x00007FF7D69BB471]\n\tGetHandleVerifier [0x00007FF7D6EAF30D+3366989]\n\tGetHandleVerifier [0x00007FF7D6EC12F0+3440688]\n\tGetHandleVerifier [0x00007FF7D6EB78FD+3401277]\n\tGetHandleVerifier [0x00007FF7D6C4AAAB+858091]\n\t(No symbol) [0x00007FF7D6AEE74F]\n\t(No symbol) [0x00007FF7D6AEA304]\n\t(No symbol) [0x00007FF7D6AEA49D]\n\t(No symbol) [0x00007FF7D6AD8B69]\n\tBaseThreadInitThunk [0x00007FFA4C7B7614+20]\n\tRtlUserThreadStart [0x00007FFA4D3626A1+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"06dce07b7e2700292a47590881478e21\")>\n\n    def test_go_to_blog(driver):\n        main_page = MainPage(driver)\n        main_page.open()\n>       main_page.go_to_blog()\n\ntest_aqa1\\main_test.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_aqa1\\pages\\main_page.py:68: in go_to_blog\n    blog_link = self.find_element(self.BLOG_LINK)\ntest_aqa1\\pages\\base_page.py:11: in find_element\n    return self.wait.until(EC.visibility_of_element_located(locator))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:137: in until\n    value = method(self._driver)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:224: in _predicate\n    return _element_if_visible(driver.find_element(*locator))\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:888: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:429: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027E7A637230>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...07FF7D6AD8B69]\\\\n\\\\tBaseThreadInitThunk [0x00007FFA4C7B7614+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFA4D3626A1+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: unable to send message to renderer\nE         (Session info: chrome=132.0.6834.160)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF7D6B802F5+28725]\nE       \t(No symbol) [0x00007FF7D6AE2AE0]\nE       \t(No symbol) [0x00007FF7D697510A]\nE       \t(No symbol) [0x00007FF7D696222C]\nE       \t(No symbol) [0x00007FF7D696219C]\nE       \t(No symbol) [0x00007FF7D69608B6]\nE       \t(No symbol) [0x00007FF7D696163F]\nE       \t(No symbol) [0x00007FF7D6979791]\nE       \t(No symbol) [0x00007FF7D697A27A]\nE       \t(No symbol) [0x00007FF7D697EABC]\nE       \t(No symbol) [0x00007FF7D697EB8F]\nE       \t(No symbol) [0x00007FF7D69C8C85]\nE       \t(No symbol) [0x00007FF7D69C95FC]\nE       \t(No symbol) [0x00007FF7D6A13407]\nE       \t(No symbol) [0x00007FF7D69EFFEF]\nE       \t(No symbol) [0x00007FF7D6A10181]\nE       \t(No symbol) [0x00007FF7D69EFD53]\nE       \t(No symbol) [0x00007FF7D69BA0E3]\nE       \t(No symbol) [0x00007FF7D69BB471]\nE       \tGetHandleVerifier [0x00007FF7D6EAF30D+3366989]\nE       \tGetHandleVerifier [0x00007FF7D6EC12F0+3440688]\nE       \tGetHandleVerifier [0x00007FF7D6EB78FD+3401277]\nE       \tGetHandleVerifier [0x00007FF7D6C4AAAB+858091]\nE       \t(No symbol) [0x00007FF7D6AEE74F]\nE       \t(No symbol) [0x00007FF7D6AEA304]\nE       \t(No symbol) [0x00007FF7D6AEA49D]\nE       \t(No symbol) [0x00007FF7D6AD8B69]\nE       \tBaseThreadInitThunk [0x00007FFA4C7B7614+20]\nE       \tRtlUserThreadStart [0x00007FFA4D3626A1+33]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "steps": [{"name": "Открываем главную страницу", "status": "passed", "start": 1738681165762, "stop": 1738681166583}], "start": 1738681165761, "stop": 1738681176544, "uuid": "e2e9cc5e-27dc-43f9-95f6-26c84784d16c", "historyId": "8810eb5896eae9c7757a8b8e17b18ee8", "testCaseId": "8810eb5896eae9c7757a8b8e17b18ee8", "fullName": "test_aqa1.main_test#test_go_to_blog", "labels": [{"name": "parentSuite", "value": "test_aqa1"}, {"name": "suite", "value": "main_test"}, {"name": "host", "value": "WIN-HGRM25OJIII"}, {"name": "thread", "value": "8920-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_aqa1.main_test"}]}